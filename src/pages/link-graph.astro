---
import MainGridLayout from '../layouts/MainGridLayout.astro'
import { i18n } from '../i18n/translation'
import I18nKey from '../i18n/i18nKey'
import type { SideWidgets } from '@components/widget/SideBar.astro'
const sideWidgets:  SideWidgets = [{type: 'tag'}]
---
<MainGridLayout title={i18n(I18nKey.linkGraph)} description={i18n(I18nKey.linkGraph)} sideWidgets={sideWidgets}>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-[75vh]">
        <div class="card-base z-10 px-9 py-6 relative w-full" id="interactive-graph">
        </div>
    </div>
</MainGridLayout>

<script>
import { use, init } from 'echarts/core'
import { GraphChart } from 'echarts/charts'
import { CanvasRenderer } from 'echarts/renderers'
import type { ComposeOption } from 'echarts/core'
import type { GraphSeriesOption } from 'echarts/charts'

use([GraphChart, CanvasRenderer])
type ChartOption = ComposeOption<GraphSeriesOption>

window.addEventListener('load', () => {
    const container = document.getElementById('interactive-graph')
    if (import.meta.env.PROD) {
        const graph = init(container)
        fetch('/link-graph.json')
            .then(resp => resp.json())
            .then((json: ChartOption) => {
                const color = `hsl(${window.document.documentElement.style.getPropertyValue('--hue')}, 25%, 75%)`;
                (json as any).series[0].emphasis.itemStyle.color = color;
                (json as any).series[0].emphasis.lineStyle.color = color;
                (json as any).series[0].label.formatter = ({ data }: any) => data.title
                graph.setOption(json)
            })
        graph.on('click', ({dataType, data}) => {
            if (dataType === 'node') {
                window.location.href = `/posts/${(data as any).name}/`
            }
        })
        window.addEventListener('resize', () => graph.resize())
    }
})
</script>
