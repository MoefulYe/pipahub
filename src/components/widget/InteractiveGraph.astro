---
import { i18n } from "@i18n/translation";
import WidgetLayout from "./WidgetLayout.astro";
import I18nKey from "@i18n/i18nKey";
import { getNeighbours } from "@/link-graph";

interface Props {
    class?: string
    style?: string
    slug: string
}
const { slug, ...rest } = Astro.props
const { egdes, nodes } = await getNeighbours(slug)
---

<WidgetLayout name={i18n(I18nKey.linkGraph)} id="link-graph" isCollapsed={false} {...rest}>
    <div class="h-48" id="graph-container" data-nodes={JSON.stringify(nodes)} data-edges={JSON.stringify(egdes)} data-slug={slug}></div>
</WidgetLayout>

<script>
import { use, init } from 'echarts/core'
import { GraphChart } from 'echarts/charts'
import { CanvasRenderer } from 'echarts/renderers'
import { chartOpts } from '@/link-graph/options'

use([GraphChart, CanvasRenderer])
window.addEventListener('load', () => {
    const container = document.getElementById('graph-container')!
    const graph = init(container)
    graph.on('click', ({dataType, data}) => {
        if (dataType === 'node') {
            window.location.href = `/posts/${(data as any).name}/`
        }
    })
    const nodes = JSON.parse(container.dataset.nodes!)
    const edges = JSON.parse(container.dataset.edges!)
    const slug = container.dataset.slug!
    const primColor =  `hsl(${window.document.documentElement.style.getPropertyValue('--hue')}, 25%, 75%)`
    const opts = chartOpts(nodes, edges, primColor)
    graph.setOption(opts)
    graph.dispatchAction({
        type: 'highlight',
        seriesIndex: 0,
        name: slug
    }) 
    window.addEventListener('resize', () => graph.resize())
})
</script>